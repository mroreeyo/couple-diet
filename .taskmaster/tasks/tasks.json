{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the project repository on GitHub and set up the basic folder structure for the Next.js application.",
        "details": "Create a new repository on GitHub. Clone it locally and set up a Next.js project using 'npx create-next-app'. Organize the folder structure to include components, pages, and styles directories.",
        "testStrategy": "Verify repository creation and folder structure by checking the GitHub repository and local file system.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Supabase Project",
        "description": "Set up a Supabase project for authentication and database management.",
        "details": "Create a new Supabase project. Set up the PostgreSQL database with the specified schema for users, meals, and couples tables. Enable authentication features.",
        "testStrategy": "Test database connection and ensure tables are created correctly by querying the database.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Supabase Project",
            "description": "Initialize a new Supabase project for the app.",
            "dependencies": [],
            "details": "Log in to Supabase, create a new project, and note the API keys and project URL.\n<info added on 2025-07-06T12:02:08.725Z>\nSupabase project creation is complete!\n\nCompleted tasks:\n- New project created in the Supabase dashboard\n- Project name: couple-diet\n- Region: Northeast Asia (Seoul) selected\n- Database password set\n\nTechnical preparations:\n- @supabase/supabase-js client library installed\n- src/lib/supabase.ts configuration file created\n- .env.example environment variable template created\n- Security settings for environment variables confirmed in .gitignore\n\nNext steps:\n- API key information collection and environment variable setup needed\n- Database schema design preparation completed\n</info added on 2025-07-06T12:02:08.725Z>",
            "status": "done",
            "testStrategy": "Verify project creation by accessing the Supabase dashboard."
          },
          {
            "id": 2,
            "title": "Set Up PostgreSQL Database",
            "description": "Configure the PostgreSQL database with the required schema.",
            "dependencies": [
              1
            ],
            "details": "Define tables for users, meals, and couples with appropriate fields and relationships.\n<info added on 2025-07-06T12:11:14.195Z>\nSupabase connection test preparation is complete. \n\nCompleted tasks:\n1. Test page created (src/app/test-supabase/page.tsx)\n2. Environment variables verified (all settings completed in .env.local)\n3. Development server confirmed running on port 3001\n\nTest information:\n- Test URL: http://localhost:3001/test-supabase\n- Supabase URL: https://lsvaxxuccaomzygbmacz.supabase.co\n- Environment variables: NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY set\n\nNext steps:\n- Users to verify connection status on the test page\n- Proceed to database schema creation step upon successful connection\n</info added on 2025-07-06T12:11:14.195Z>\n<info added on 2025-07-06T12:13:02.854Z>\nSupabase connection test completed successfully!\n\nCompleted tasks:\n1. Supabase client configuration updated (client/server separation)\n2. Environment variable loading confirmed\n3. Database connection test successful\n4. Authentication system access verified\n\nResolved issues:\n- Fixed `supabaseKey is required` error\n- Corrected issue with server-only key being accessed from client\n- Handled server-side processing with `createSupabaseAdmin()` function\n\nTest results:\n- Connection Status: Connected\n- Auth Status: No active session (normal)\n- Database: Connected (tables not created yet) (normal)\n- Environment Variables: All set correctly\n\nReady for the next step: Authentication Features activation preparation is complete.\n</info added on 2025-07-06T12:13:02.854Z>",
            "status": "done",
            "testStrategy": "Check the database schema in the Supabase dashboard to ensure tables are correctly set up."
          },
          {
            "id": 3,
            "title": "Enable Authentication Features",
            "description": "Activate and configure authentication options in Supabase.",
            "dependencies": [
              1
            ],
            "details": "Enable email/password authentication and configure any additional providers if needed.",
            "status": "pending",
            "testStrategy": "Test authentication by registering and logging in a new user."
          },
          {
            "id": 4,
            "title": "Implement User Table Schema",
            "description": "Design and implement the schema for the users table.",
            "dependencies": [
              2
            ],
            "details": "Include fields such as user_id, email, password_hash, and any other necessary user information.",
            "status": "pending",
            "testStrategy": "Verify the users table schema by inserting and retrieving a test user."
          },
          {
            "id": 5,
            "title": "Implement Meals Table Schema",
            "description": "Design and implement the schema for the meals table.",
            "dependencies": [
              2
            ],
            "details": "Include fields such as meal_id, user_id, meal_name, calories, and date.",
            "status": "pending",
            "testStrategy": "Verify the meals table schema by inserting and retrieving a test meal entry."
          },
          {
            "id": 6,
            "title": "Implement Couples Table Schema",
            "description": "Design and implement the schema for the couples table.",
            "dependencies": [
              2
            ],
            "details": "Include fields such as couple_id, user1_id, user2_id, and relationship_status.",
            "status": "pending",
            "testStrategy": "Verify the couples table schema by inserting and retrieving a test couple entry."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement User Authentication System",
        "description": "Develop the user authentication system including registration, login, and couple connection features.",
        "details": "Use Supabase's authentication API to implement email-based registration, login, and couple connection features. Create necessary API endpoints for these actions.",
        "testStrategy": "Perform unit tests on the authentication API endpoints and validate user registration and login flows.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Develop Meal Upload Feature",
        "description": "Implement the meal upload feature allowing users to upload meal photos with associated metadata.",
        "details": "Create an API endpoint to handle meal uploads. Integrate image compression and optimization before uploading to Supabase storage. Ensure the meal type is auto-set based on the current time.",
        "testStrategy": "Test the meal upload functionality by uploading images and verifying that they are stored correctly in Supabase.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Integrate AI Calorie Measurement API",
        "description": "Connect the application to an external AI service for calorie measurement based on uploaded meal photos.",
        "details": "Implement the API call to the AI service for calorie analysis. Handle the response to extract calorie information and food items.",
        "testStrategy": "Test the integration by uploading sample images and verifying that the correct calorie information is returned.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Daily Meal Verification Logic",
        "description": "Implement logic to verify daily meal uploads based on specified time slots.",
        "details": "Develop a system to restrict uploads to one per time slot (breakfast, lunch, dinner) and alert users if they attempt to upload outside these times.",
        "testStrategy": "Test the meal verification logic by attempting to upload meals at various times and ensuring restrictions are enforced.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Design Login and Registration Screens",
        "description": "Create the UI for login and registration screens using Next.js and Tailwind CSS.",
        "details": "Develop responsive login and registration forms with input validation. Include social login options and a couple connection feature.",
        "testStrategy": "Conduct usability testing to ensure the screens are intuitive and functional.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Main Feed Screen",
        "description": "Develop the main feed screen to display daily meal posts and calorie summaries.",
        "details": "Create a feed that displays uploaded meals in chronological order with calorie information. Implement infinite scroll for past meal viewing.",
        "testStrategy": "Test the feed functionality by uploading multiple meals and verifying they appear correctly in the feed.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Create Monthly Calendar Screen",
        "description": "Develop a calendar screen to display meal verification status for each date.",
        "details": "Implement a calendar view that highlights completed and incomplete meal verification dates. Allow users to click on dates for detailed meal information.",
        "testStrategy": "Test the calendar functionality by verifying meal statuses and ensuring correct display of statistics.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement State Management with Jotai",
        "description": "Set up state management using Jotai for managing user and meal states.",
        "details": "Create Jotai atoms for user information, meals, and daily calorie totals. Integrate these into the components for state management.",
        "testStrategy": "Test state management by ensuring that updates to atoms reflect correctly in the UI.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Set Up API Testing with Jest and MSW",
        "description": "Configure testing environment for API endpoints using Jest and Mock Service Worker (MSW).",
        "details": "Set up Jest for unit testing and MSW for mocking API requests. Write tests for authentication and meal upload APIs.",
        "testStrategy": "Run unit tests to ensure API endpoints function correctly and handle edge cases.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Conduct Performance Optimization",
        "description": "Optimize image upload and page loading times to meet performance requirements.",
        "details": "Implement lazy loading for images and optimize API calls. Use tools like Lighthouse to analyze performance metrics.",
        "testStrategy": "Measure performance before and after optimizations using Lighthouse and ensure targets are met.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Security Measures",
        "description": "Ensure the application adheres to security requirements including data protection and secure uploads.",
        "details": "Implement JWT for authentication, secure image uploads, and parameterized queries to prevent SQL injection.",
        "testStrategy": "Conduct security testing to ensure vulnerabilities are addressed and data protection measures are effective.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Perform Accessibility Checks",
        "description": "Ensure the application meets accessibility standards as per WCAG 2.1 guidelines.",
        "details": "Review UI components for accessibility compliance, including keyboard navigation and screen reader support.",
        "testStrategy": "Use accessibility testing tools to identify and fix any compliance issues.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Prepare for Deployment and CI/CD Setup",
        "description": "Set up CI/CD pipeline for automated testing and deployment to production.",
        "details": "Configure GitHub Actions for CI/CD to automate testing and deployment to Vercel or AWS.",
        "testStrategy": "Test the CI/CD pipeline by pushing changes and verifying that tests run and deployment occurs successfully.",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-06T11:48:37.796Z",
      "updated": "2025-07-06T12:13:08.549Z",
      "description": "Tasks for master context"
    }
  }
}